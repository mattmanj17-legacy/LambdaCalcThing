{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"lam",
				"LambdaVal"
			],
			[
				"mapm",
				"mapM"
			],
			[
				"one",
				"oneOf"
			],
			[
				"float",
				"Float"
			],
			[
				"new",
				"newDigits"
			],
			[
				"output",
				"outputMax"
			],
			[
				"base",
				"baseScore"
			],
			[
				"place",
				"placeScores"
			],
			[
				"sort",
				"sortedSets"
			],
			[
				"build",
				"building"
			],
			[
				"pla",
				"places"
			],
			[
				"buil",
				"building"
			],
			[
				"buildi",
				"buildings"
			],
			[
				"del",
				"delta"
			],
			[
				"boar",
				"boardWidth"
			],
			[
				"change",
				"changes"
			],
			[
				"bo",
				"boardWidth"
			],
			[
				"bora",
				"boardHeight"
			],
			[
				"none",
				"None"
			],
			[
				"ini",
				"initialHand"
			],
			[
				"bui",
				"buildingAt"
			],
			[
				"Sear",
				"SearchConfig"
			],
			[
				"load",
				"loaded"
			],
			[
				"non",
				"nonNullCache"
			],
			[
				"list",
				"List"
			],
			[
				"iRow",
				"iRowAdjusted"
			],
			[
				"start",
				"startingState"
			],
			[
				"mapfi",
				"mapFileToIncludes"
			],
			[
				"mapi",
				"mapFileToIncluders"
			],
			[
				"mao",
				"mapCFileToImplementingCFiles"
			],
			[
				"filepat",
				"filepath"
			],
			[
				"isfile",
				"isFilePathAnArtifactSource"
			],
			[
				"map",
				"mapCFileToImplementingCFiles"
			],
			[
				"exten",
				"fileExtensionFromFilePath"
			],
			[
				"fileext",
				"fileExtensionFromFilePath"
			],
			[
				"fileExt",
				"fileExtensionFromFilePath"
			],
			[
				"filepath",
				"filePathFromArtifact"
			],
			[
				"fileex",
				"fileExtensionFromFilePath"
			],
			[
				"ast",
				"Ast"
			],
			[
				"PMult",
				"PMultExpr"
			],
			[
				"PAdd",
				"PAddExpr"
			],
			[
				"null",
				"NullAdd"
			],
			[
				"a",
				"App"
			],
			[
				"nu",
				"NullExpr"
			],
			[
				"token",
				"Token"
			],
			[
				"Parsed",
				"ParsedFunction"
			],
			[
				"trim",
				"trimStart"
			],
			[
				"cou",
				"countTail"
			],
			[
				"count",
				"countStart"
			],
			[
				"op",
				"operatorAnd"
			],
			[
				"double",
				"doubleMe"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Tests.hs",
			"settings":
			{
				"buffer_size": 7591,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "LambdaToDebrujin.hs",
			"settings":
			{
				"buffer_size": 1021,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"build.py",
					""
				],
				[
					"Packages/User/build.sublime-build",
					""
				]
			],
			[
				"Packages/User/build.sublime-build",
				""
			]
		],
		[
			[
				[
					"cmder root",
					""
				],
				[
					"Packages/User/build.sublime-build",
					""
				]
			],
			[
				"cmder root",
				""
			]
		],
		[
			[
				[
					"kvothe",
					""
				],
				[
					"Packages/User/build.sublime-build",
					""
				]
			],
			[
				"kvothe",
				""
			]
		],
		[
			[
				[
					"pybuild",
					""
				],
				[
					"Packages/User/build.sublime-build",
					""
				]
			],
			[
				"Packages/User/build.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Satisfy Dependencies"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"giti",
				"Gitignore: New gitignore"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"new fil",
				"File: New File Relative to Project Root"
			],
			[
				"folder",
				"OpenPath: Open file folder"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"open fol",
				"OpenPath: Open file folder"
			],
			[
				"newfile",
				"File: New File Relative to Current View"
			],
			[
				"new fol",
				"File: New Folder Relative to Project Root"
			],
			[
				"file new",
				"File: New File Relative to Project Root"
			],
			[
				"open",
				"OpenPath: Open file folder"
			],
			[
				"dele",
				"File: Delete"
			],
			[
				"renm",
				"File: Rename"
			],
			[
				"move",
				"File: Move"
			],
			[
				"open file",
				"OpenPath: Open file folder"
			],
			[
				"install p",
				"Package Control: Install Package"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 577.0,
		"history":
		[
			"os.system(\"cls\")",
			"os.sys(\"cls\")",
			"import os",
			"cls",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Matthew/Desktop/lambda"
	],
	"file_history":
	[
		"/C/Users/Matthew/Desktop/lambda/ParseLambda.hs",
		"/C/Users/Matthew/Desktop/lambda/ParseDebrujin.hs",
		"/C/Users/Matthew/Desktop/lambda/LambdaToDebrujin.hs",
		"/C/Users/Matthew/Desktop/lambda/ReduceDebrujin.hs",
		"/C/Users/Matthew/Desktop/lambda/Debrujin.hs",
		"/C/Users/Matthew/Desktop/lambda/Lambda.hs",
		"/C/Users/Matthew/Desktop/lambda/ParseCommon.hs",
		"/C/Users/Matthew/Desktop/lambda/Tests.hs",
		"/C/Users/Matthew/Documents/Visual Studio 2017/Projects/Lambda/Lambda/lambda.cpp",
		"/C/Users/Matthew/Desktop/lambda/debrujin.hs",
		"/C/Users/Matthew/Desktop/lambda/lambda.hs",
		"/C/Users/Matthew/Desktop/lambda/reduceDebrujin.hs",
		"/C/Users/Matthew/Desktop/lambda/lambdaToDebrujin.hs",
		"/C/Users/Matthew/Desktop/lambda/parseLambda.hs",
		"/C/Users/Matthew/Desktop/lambda/tests.hs",
		"/C/Users/Matthew/Desktop/lambda/reduceLambda.hs",
		"/C/Users/Matthew/Desktop/lambda/lambdaAst.hs",
		"/C/Users/Matthew/Desktop/lambda/Lambda.hi",
		"/C/Users/Matthew/Desktop/lambda/LambdaAst.hi",
		"/C/Users/Matthew/Desktop/lambda/tests.hi",
		"/C/Users/Matthew/Desktop/lambda/ParseLambda.hi",
		"/C/Users/Matthew/Desktop/lambda/parseCommon.hs",
		"/C/Users/Matthew/Documents/Visual Studio 2017/Projects/Solution1/Project2/Source.cpp",
		"/C/Users/Matthew/Desktop/lang/lang.hs",
		"/E/Projects/metaJson/ParseJson.hs",
		"/E/Projects/metaJson/test.hs",
		"/E/Projects/metaJson/JsonValue.hs",
		"/E/Projects/metaJson/genTests.hs",
		"/C/Users/Matthew/Desktop/metathing.hs",
		"/C/Users/Matthew/Desktop/metajson.py",
		"/C/Users/Matthew/Desktop/test.json",
		"/C/Users/Matthew/Desktop/lob.json",
		"/C/Users/Matthew/Desktop/test,html.html",
		"/E/Shortcuts/mypy_all_strict.py",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_utf8.json",
		"/C/Users/Matthew/Desktop/metaJson/genTests.hs",
		"/C/Users/Matthew/Desktop/metaJson/DumpJson.hs",
		"/C/Users/Matthew/Desktop/metaJson/test.hs",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/n_array_invalid_utf8.json",
		"/C/Users/Matthew/Desktop/metaJson/heyhey.txt",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_uEscape.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_uescaped_newline.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unescaped_char_delete.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode_2.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode_escaped_double_quote.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode_U+1FFFE_nonchar.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode_U+10FFFE_nonchar.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode_U+200B_ZERO_WIDTH_SPACE.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode_U+2064_invisible_plus.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode_U+FDD0_nonchar.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicodeEscapedBackslash.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_unicode_U+FFFE_nonchar.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_with_del_character.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_lonely_int.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_lonely_negative_real.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_lonely_null.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_lonely_string.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_lonely_false.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_lonely_true.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_string_empty.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_trailing_newline.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_whitespace_array.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_structure_true_in_array.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_empty.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_empty-string.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_arraysWithSpaces.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_ending_with_newline.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_heterogeneous.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_false.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_with_1_and_newline.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_with_leading_space.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_null.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_with_several_null.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_array_with_trailing_space.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_0e+1.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_after_space.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_double_close_to_zero.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_0e1.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_minus_zero.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_int_with_exp.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_negative_int.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_negative_one.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_negative_zero.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_real_capital_e.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_real_capital_e_neg_exp.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_real_exponent.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_real_capital_e_pos_exp.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_real_neg_exp.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_real_fraction_exponent.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_real_pos_exponent.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_simple_int.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_number_simple_real.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_duplicated_key.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_basic.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_empty.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_empty_key.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_duplicated_key_and_value.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_escaped_null_in_key.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_extreme_numbers.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_long_strings.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_simple.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_string_unicode.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_object_with_newlines.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_1_2_3_bytes_UTF-8_sequences.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_accepted_surrogate_pair.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_u+2029_par_sep.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_accepted_surrogate_pairs.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_allowed_escapes.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_backslash_and_u_escaped_zero.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_backslash_doublequotes.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_double_escape_a.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_comments.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_double_escape_n.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_escaped_control_character.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_escaped_noncharacter.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_in_array.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_in_array_with_leading_space.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_last_surrogates_1_and_2.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_nbsp_uescaped.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_nonCharacterInUTF-8_U+10FFFF.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_nonCharacterInUTF-8_U+FFFF.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_null_escape.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_one-byte-utf-8.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_pi.json",
		"/C/Users/Matthew/Desktop/JSONTestSuite-master/test_parsing/y_string_reservedCharacterInUTF-8_U+1BFFF.json"
	],
	"find":
	{
		"height": 31.0
	},
	"find_in_files":
	{
		"height": 223.0,
		"where_history":
		[
			"C:\\Users\\Matthew\\Desktop\\lambda,*.hs",
			"C:\\Users\\Matthew\\Desktop\\lambda,*.*",
			"C:\\Users\\Matthew\\Desktop\\PlainApollo,*.*",
			"C:\\Users\\Matthew\\Desktop\\make-3.81-src - Copy,*.c,*.h",
			"C:\\Users\\Matthew\\Desktop\\PlainApollo,*.c,*.h",
			"C:\\Users\\Matthew\\Desktop\\PlainApollo\\glfw\\tests,*.c,*.h",
			"C:\\Users\\Matthew\\Desktop\\PlainApollo\\glfw,*.c,*.h",
			"C:\\Users\\Matthew\\Desktop\\ScrapWars\\Unity\\Assets\\CCGKit",
			"<open files>",
			"C:\\Users\\Matthew\\Desktop\\foobar",
			"C:\\Users\\Matthew\\Desktop\\glfw-master\\include,C:\\Users\\Matthew\\Desktop\\glfw-master\\src"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"parseArgFn",
			"parseLambdaLike",
			"[^a-zA-Z]Parse(Lambda|Debrujin)[^a-zA-Z]",
			"[^a-z]Parse(Lambda|Debrujin)[^a-z]",
			"IncrementedArgRefsGreaterThan",
			"lambdaBoundVarsAnonymized",
			"LIV",
			"LAP",
			"LAB",
			"LAR",
			"LIV",
			"LambdaValAnon",
			"λ",
			"parseFromStr",
			",",
			"LambdaValInput",
			",",
			"transformLambda",
			"parseJsonWhiteSpace",
			"parseWithWhiteSpaceFallback",
			"parseJsonWhiteSpace",
			"whitespace",
			"try",
			"parseLiteral",
			"::.*",
			"try",
			"huh",
			"JsonValue",
			"uD869",
			"\\",
			"<\\?>",
			"<\\|>",
			"\\n",
			"try",
			"fail",
			"parseWithWhiteSpaceFallback",
			"parseJsonWhiteSpace",
			"parseWithWhiteSpaceFallback",
			"parseLiteral",
			"\\n\\|",
			"\\n=",
			"class",
			"type",
			"data",
			"\\n\\n",
			".*BRK",
			"(..)",
			" ",
			"'",
			",",
			"\\n",
			"parameter_delimiter",
			"specification_part",
			"formal_parameter_list",
			"parameter_delimiter",
			"formal_parameter_part",
			"declaration",
			"procedure_heading",
			"procedure_declaration",
			"switch_declaration",
			"designational_expression",
			"subscript_expression",
			"switch_designator",
			"designational_expression",
			"switch_declaration",
			"boolean_expression",
			"variable",
			"relation",
			"relational_operator",
			"boolean_expression",
			"bound_pair",
			"local_or_static_type",
			"array_declaration",
			"array_segment",
			"type_declaration",
			"simple_variable",
			"variable_identifier",
			"simple_variable",
			"type_declaration",
			"local_or_static_type",
			"type",
			"local_or_own_type",
			"label",
			"subscript_expression",
			"proper_string",
			"open_string",
			"proper_string",
			"open_string",
			"STRING",
			"proper_string",
			"letter_string",
			"identifier",
			"specificator",
			"DECLARATOR",
			"bracket",
			"SEPARATOR",
			"SEQUENTIAL_OPERATOR",
			"LOGICAL_OPERATOR",
			"RELATIONAL_OPERATOR",
			"ARITHMETIC_OPERATOR",
			"operator",
			"delimiter",
			"logical_value",
			"basic_symbol",
			"delimiter",
			"operator",
			"exponential_part",
			"integer",
			"unsigned_integer",
			"decimal_number",
			"unsigned_number",
			"primary",
			"function_designator",
			"actual_parameter_list",
			"function_designator",
			"primary",
			"function_designator",
			"simple_arithmetic_expression",
			"adding_operator",
			"simple_arithmetic_expression",
			"arithmetic_expression2",
			"simple_arithmetic_expression",
			"multiplying_operator",
			"term",
			"primary",
			"for_list_element",
			"for_list",
			"if_clause"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"LAR",
			"DAP",
			"DAB",
			"DAR",
			"LAR",
			"Debrujin",
			"/",
			"\\\\\\\\",
			"\\n",
			"LambdaAst",
			"\\n",
			"transformLambdaArgRefs",
			"",
			" ",
			" |",
			" =",
			"\\nclass",
			"\\ntype",
			"\\ndata",
			"\\n",
			"",
			"\\1\\n00\\n00",
			"\\1\\n00",
			"",
			" ",
			"\\n",
			" ",
			"subscript_expression:arithmetic_expression",
			"simple_variable:identifier",
			"local_or_static_type",
			"if_clause:boolean_expression",
			"actual_parameter_part:actual_parameter_list",
			"procedure_identifier:identifier",
			"switch_identifier:identifier",
			"array_identifier:identifier",
			"",
			"Gold Vein",
			"Flower",
			"Tree",
			"Balloon",
			"Monument",
			"Wall",
			"Temple",
			"Tavern",
			"Resort Oasis",
			"Market",
			"Brickyard",
			"Sandpit",
			"Mason",
			"Statue",
			"Jewelry",
			"Gold Mine",
			"Tower",
			"Circus",
			"Warehouse",
			"Fountain",
			"Plateau",
			"Park",
			"Hut",
			"Fisher",
			"Mansion",
			"House",
			"City Center",
			"Water Plateau",
			"Seawead Farm",
			"Seaweed Field",
			"Shaman",
			"Hop Field",
			"Brewery",
			"Sawmill",
			"Lumberjack",
			"Field",
			"Mill",
			",0,",
			"",
			",",
			"\\n",
			"\\1\\t",
			"\\n\\t",
			"\\1\\t",
			"\\n",
			":Tuple",
			"artifact::Tuple[str, str]",
			"callOne",
			"callAll",
			"zvCallArg",
			"loopExpr",
			"typeVar",
			"loopVar",
			"rVariable",
			"zVariable",
			"vVariable",
			"allType",
			"varType",
			"tupleType",
			"simpleType",
			"negConstant",
			"posConstant",
			"=",
			"\"../deps/nuklear_glfw_gl2.h\"",
			"\"../deps/nuklear.h\"",
			"\"../deps/getopt.h\"",
			"\"../include/GLFW/glfw3.h\"",
			"\"../deps/glad/gl.h\"",
			"\"glad/gl.h\"",
			"\\n",
			"\\1,",
			"\"\\1\"\\n",
			"*\\1*\\2",
			".\\n",
			".",
			".\\n",
			".",
			"\\n",
			"TestSingleHash(\"\\1\", () => \\1.Instance.Create());\\n",
			"TestSingleHash(\"\\1\", () => \\1.Instance.Create());",
			"",
			"\\n",
			"\\2",
			"",
			"\\n",
			"\\n\\n",
			"\\n",
			"\\n\\n",
			"",
			"LambdaApplication",
			"LambdaApply",
			"LambdaVar"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Tests.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7591,
						"regions":
						{
						},
						"selection":
						[
							[
								6431,
								6431
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 10,
								"count": 668,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Haskell/Haskell.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2706.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "LambdaToDebrujin.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1021,
						"regions":
						{
						},
						"selection":
						[
							[
								810,
								810
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 94,
								"count": 83,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Haskell/Haskell.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 77.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 205.0
	},
	"output.exec":
	{
		"height": 244.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "lambda.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"files",
				"scripts\\python\\files.py"
			],
			[
				"main.",
				"src\\main.c"
			],
			[
				"giti",
				".gitignore"
			],
			[
				"build",
				"build.py"
			],
			[
				"include",
				"include.py"
			],
			[
				"versions",
				"versions.py"
			],
			[
				"files.p",
				"files.py"
			],
			[
				"boing",
				"glfw\\examples\\boing.c"
			],
			[
				"clean",
				"clean.py"
			],
			[
				"clean.",
				"clean.py"
			],
			[
				"incl",
				"include.py"
			],
			[
				"build.p",
				"build.py"
			],
			[
				"git",
				".gitignore"
			],
			[
				"build.b",
				"build.bat"
			],
			[
				"includ",
				"include.py"
			],
			[
				"interna",
				"glfw\\src\\internal.h"
			],
			[
				"omes",
				"glfw\\src\\osmesa_context.c"
			],
			[
				"hello",
				"helloWorld.c"
			],
			[
				"nukl",
				"glfw\\deps\\nuklear.h"
			],
			[
				"intern",
				"glfw\\src\\internal.h"
			],
			[
				"vk_platform",
				"glfw\\deps\\glad\\vk_platform.h"
			],
			[
				"vulkan",
				"glfw\\deps\\glad\\vulkan.h"
			],
			[
				"title",
				"glfw\\tests\\title.c"
			],
			[
				"gitig",
				".gitignore"
			],
			[
				"threads",
				"glfw\\tests\\threads.c"
			],
			[
				"msaa.c",
				"glfw\\tests\\msaa.c"
			],
			[
				"glfwin",
				"glfw\\tests\\glfwinfo.c"
			],
			[
				"nuklear_glfw_gl2",
				"glfw\\deps\\nuklear_glfw_gl2.h"
			],
			[
				"nuklear_glfw_gl2.h",
				"glfw\\deps\\nuklear_glfw_gl2.h"
			],
			[
				"nuklear",
				"glfw\\deps\\nuklear.h"
			],
			[
				"gam",
				"glfw\\tests\\gamma.c"
			],
			[
				"clipbo",
				"glfw\\tests\\clipboard.c"
			],
			[
				"wl_i",
				"glfw\\src\\wl_init.c"
			],
			[
				"posix",
				"glfw\\src\\posix_thread.c"
			],
			[
				"glfw3",
				"glfw\\include\\GLFW\\glfw3.h"
			],
			[
				"nullwin",
				"glfw\\src\\null_window.c"
			],
			[
				"glx_context",
				"glfw\\src\\glx_context.h"
			],
			[
				"glx",
				"glfw\\src\\glx_context.c"
			],
			[
				"inter",
				"glfw\\src\\internal.h"
			],
			[
				"wave.",
				"glfw\\examples\\wave.c"
			],
			[
				"splitv",
				"glfw\\examples\\splitview.c"
			],
			[
				"simpl",
				"glfw\\examples\\simple.c"
			],
			[
				"shar",
				"glfw\\examples\\sharing.c"
			],
			[
				"parti",
				"glfw\\examples\\particles.c"
			],
			[
				"stb_image_write",
				"glfw\\deps\\stb_image_write.h"
			],
			[
				"offsc",
				"glfw\\examples\\offscreen.c"
			],
			[
				"height",
				"glfw\\examples\\heightmap.c"
			],
			[
				"gears.",
				"glfw\\examples\\gears.c"
			],
			[
				"linma",
				"glfw\\deps\\linmath.h"
			],
			[
				"gl.h",
				"glfw\\deps\\glad\\gl.h"
			],
			[
				"glad_vulk",
				"glfw\\deps\\glad_vulkan.c"
			],
			[
				"vulkan.h",
				"glfw\\deps\\glad\\vulkan.h"
			],
			[
				"vulkan.c",
				"glfw\\tests\\vulkan.c"
			],
			[
				"geto",
				"glfw\\deps\\getopt.h"
			],
			[
				"glfw.3",
				"glfw\\include\\GLFW\\glfw3.h"
			],
			[
				"rule",
				"rules_simple.txt"
			],
			[
				"CharHelpers",
				"CharHelpers.hs"
			],
			[
				"parsecomm",
				"ParseCommon.hs"
			],
			[
				"parseid",
				"ParseId.hs"
			],
			[
				"parsecom",
				"ParseCommon.hs"
			],
			[
				"parseco",
				"ParseCommon.hs"
			],
			[
				"main",
				"main.hs"
			],
			[
				"eror",
				"Error.hs"
			],
			[
				"run",
				"run.bat"
			],
			[
				"error",
				"Error.hs"
			],
			[
				"parse",
				"ParseId.hs"
			],
			[
				"test",
				"test.txt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 325.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
